{"ast":null,"code":"import './App.css';\nimport { setCurrentUser, logoutUser } from \"./redux/actions\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token); // Decode token and get user info and exp\n\n  const decoded = jwt_decode(token); // Set user and isAuthenticated\n\n  store.dispatch(setCurrentUser(decoded)); // Check for expired token\n\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser()); // Redirect to login\n\n    window.location.href = \"./login\";\n  }\n}\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ghto/Desktop/Tecnnique/tech-front/src/App.js"],"names":["setCurrentUser","logoutUser","localStorage","jwtToken","token","setAuthToken","decoded","jwt_decode","store","dispatch","currentTime","Date","now","exp","window","location","href","App"],"mappings":"AAAA,OAAO,WAAP;AACA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,iBAA3C;AAEA,OAAO,sCAAP;;;;AAEA,IAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzB;AACA,QAAMC,KAAK,GAAGF,YAAY,CAACC,QAA3B;AACAE,EAAAA,YAAY,CAACD,KAAD,CAAZ,CAHyB,CAIzB;;AACA,QAAME,OAAO,GAAGC,UAAU,CAACH,KAAD,CAA1B,CALyB,CAMzB;;AACAI,EAAAA,KAAK,CAACC,QAAN,CAAeT,cAAc,CAACM,OAAD,CAA7B,EAPyB,CAQzB;;AACA,QAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CATyB,CASc;;AACvC,MAAIN,OAAO,CAACO,GAAR,GAAcH,WAAlB,EAA+B;AAC7B;AACAF,IAAAA,KAAK,CAACC,QAAN,CAAeR,UAAU,EAAzB,EAF6B,CAG7B;;AACAa,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD;AACF;;AAED,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE,qCADF;AAKD,CAND;;KAAMA,G;AAQN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { setCurrentUser, logoutUser } from \"./redux/actions\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nconst App = () => {\n  return (\n    <>\n      \n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}