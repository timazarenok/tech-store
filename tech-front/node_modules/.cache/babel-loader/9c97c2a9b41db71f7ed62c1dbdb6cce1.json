{"ast":null,"code":"var _jsxFileName = \"/home/ghto/Desktop/Tecnnique/tech-front/src/App.js\";\nimport \"./App.css\";\nimport { setCurrentUser, logoutUser, setAuthToken } from \"./redux/actions/authActions\";\nimport jwt_decode from \"jwt-decode\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token); // Decode token and get user info and exp\n\n  const decoded = jwt_decode(token); // Set user and isAuthenticated\n\n  store.dispatch(setCurrentUser(decoded)); // Check for expired token\n\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser()); // Redirect to login\n\n    window.location.href = \"./login\";\n  }\n}\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ghto/Desktop/Tecnnique/tech-front/src/App.js"],"names":["setCurrentUser","logoutUser","setAuthToken","jwt_decode","BrowserRouter","Router","Route","Switch","Provider","store","localStorage","jwtToken","token","decoded","dispatch","currentTime","Date","now","exp","window","location","href","App"],"mappings":";AAAA,OAAO,WAAP;AACA,SACEA,cADF,EAEEC,UAFF,EAGEC,YAHF,QAIO,6BAJP;AAKA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,sCAAP;;;AAEA,IAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzB;AACA,QAAMC,KAAK,GAAGF,YAAY,CAACC,QAA3B;AACAT,EAAAA,YAAY,CAACU,KAAD,CAAZ,CAHyB,CAIzB;;AACA,QAAMC,OAAO,GAAGV,UAAU,CAACS,KAAD,CAA1B,CALyB,CAMzB;;AACAH,EAAAA,KAAK,CAACK,QAAN,CAAed,cAAc,CAACa,OAAD,CAA7B,EAPyB,CAQzB;;AACA,QAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CATyB,CASc;;AACvC,MAAIJ,OAAO,CAACK,GAAR,GAAcH,WAAlB,EAA+B;AAC7B;AACAN,IAAAA,KAAK,CAACK,QAAN,CAAeb,UAAU,EAAzB,EAF6B,CAG7B;;AACAkB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD;AACF;;AAED,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAA,2BACE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;;KAAMa,G;AAUN,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport {\n  setCurrentUser,\n  logoutUser,\n  setAuthToken,\n} from \"./redux/actions/authActions\";\nimport jwt_decode from \"jwt-decode\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch></Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}